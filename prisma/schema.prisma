// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Vendor {
    id          String @id @default(cuid())
    paypalEmail String

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

enum ProductFileStatus {
    Draft
    Released
}

model ProductFile {
    id String @id @default(cuid())

    name    String
    message String            @db.Text()
    version String            @unique
    fileKey String            @unique
    status  ProductFileStatus @default(Draft)

    downloads Int @default(0)

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String

    createdAt DateTime @default(now())
}

enum PurchaseStatus {
    Pending
    Paid
    Cancelled
}

model Purchase {
    id            String         @id @default(cuid())
    status        PurchaseStatus @default(Pending)
    paypalOrderId String

    createdAt DateTime @default(now())

    user    User    @relation(fields: [userId], references: [id])
    product Product @relation(fields: [productId], references: [id])

    userId    String
    productId String

    @@unique([userId, productId])
}

model ProductImage {
    id        String  @id @default(cuid())
    url       String
    product   Product @relation(fields: [productId], references: [id])
    productId String

    @@unique([productId, url])
}

enum ProductStatus {
    Published
    UnderReview
    Draft
}

model Product {
    id          String         @id @default(cuid())
    name        String
    icon        String?        @unique @db.VarChar(255)
    overview    String
    price       Int            @default(0)
    description String         @db.Text
    status      ProductStatus  @default(Draft)
    owner       User           @relation(fields: [ownerId], references: [id])
    ownerId     String
    images      ProductImage[]

    createdAt DateTime      @default(now())
    updatedAt DateTime      @default(now())
    purchases Purchase[]
    files     ProductFile[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    role          String     @default("member")
    joinedAt      DateTime   @default(now())
    verified      Boolean    @default(false)
    accounts      Account[]
    sessions      Session[]
    products      Product[]
    purchases     Purchase[]
    Vendor        Vendor[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
